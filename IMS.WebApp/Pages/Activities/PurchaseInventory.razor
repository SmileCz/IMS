@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase;
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase;
@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase;
@inject IJSRuntime JsRuntime;

@page "/purchase"
<h3>Purchase</h3>
<EditForm id="purchase-form" Model="_purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label for="po">Purchase Order #</label>
        <InputText class="form-control" id="po" @bind-Value="_purchaseViewModel.PoNumber"/>
    </div>
    <br/>
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <label for="inv">Inventory to Purchase</label>
                <AutoCompleteComponent SearchFunction="SearchInventory" OnItemSelected="OnItemSelected"/>
                <input type="hidden" value="@_purchaseViewModel.InventoryId"/>
                @if (_purchaseViewModel.InventoryId > 0 && _purchaseViewModel.InventoryPrice >= 0)
                {
                    <text>Price:</text>
                    @_purchaseViewModel.InventoryPrice.ToString("c")
                }
            </div>
        </div>
    </div>
    <br/>
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber class="form-control" id="qty" @bind-Value="_purchaseViewModel.QuantityToPurchase"/>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Purchase</button>
</EditForm>


@code {

    private PurchaseViewModel _purchaseViewModel = new();
    private Inventory? _selectedInventory;

    private async Task Purchase()
    {
        await PurchaseInventoryUseCase.ExecuteAsync(_purchaseViewModel.PoNumber,
            _selectedInventory,
            _purchaseViewModel.QuantityToPurchase, "Anynomous");
        _purchaseViewModel = new();
        _selectedInventory = null;
    }

    private async Task<List<AutoCompleteComponent.ItemViewModel>>? SearchInventory(string name)
    {
        var list = await ViewInventoriesByNameUseCase.ExecuteAsync(name);


        return list.Select(x => new AutoCompleteComponent.ItemViewModel() { Id = x.Id, Name = x.Name }).ToList();
    }

    private async Task OnItemSelected(AutoCompleteComponent.ItemViewModel item)
    {
        _selectedInventory = await ViewInventoryByIdUseCase.ExecuteAsync(item.Id);
        _purchaseViewModel.InventoryId = item.Id;
        _purchaseViewModel.InventoryPrice = _selectedInventory.Price;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            JsRuntime.InvokeVoidAsync("preventFormSubmition", "purchase-form");
        }
    }

}