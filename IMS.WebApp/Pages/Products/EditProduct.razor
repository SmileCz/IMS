@page "/editproduct/{id:int}"
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager
<h3>EditProduct</h3>
<br/>

@if (this._product is not null)
{
    <EditForm Model="_product" OnValidSubmit="SaveProductAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group mb-3">
            <label for="name" class="form-label">Product Name</label>
            <InputText id="name" @bind-Value="_product.Name" class="form-control"/>
        </div>
        <div class="form-group mb-3">
            <label for="quantity" class="form-label">Quantity</label>
            <InputNumber id="quantity" @bind-Value="_product.Quantity" class="form-control"/>
        </div>
        <div class="form-group mb-3">
            <label for="price" class="form-label">Price</label>
            <InputNumber id="price" @bind-Value="_product.Price" class="form-control"/>
        </div>
        <div class="form-group">
            <label for="invs">Inventories</label>
            <ProductInventoriesComponent Product="_product"></ProductInventoriesComponent>
        </div>
        <br/>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {

    private Product? _product;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _product = await ViewProductByIdUseCase.ExecuteAsync(this.Id);
    }

    private async Task SaveProductAsync()
    {
        if (_product is not null)
        {
            await EditProductUseCase.ExecuteAsync(_product);
        }
        NavigateBackToProducts();
    }

    private void Cancel()
    {
        NavigateBackToProducts();
    }

    private void NavigateBackToProducts()
    {
        NavigationManager.NavigateTo("/products");
    }



}